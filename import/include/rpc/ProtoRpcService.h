/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProtoRpcService_H
#define ProtoRpcService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ProtoService_types.h"

namespace proto_rpc {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ProtoRpcServiceIf {
 public:
  virtual ~ProtoRpcServiceIf() {}
  virtual void dealTwowayMessage(ProtoReply& _return, const ProtoRequest& rq) = 0;
  virtual void dealOnewayMessage(const ProtoRequest& rq) = 0;
};

class ProtoRpcServiceIfFactory {
 public:
  typedef ProtoRpcServiceIf Handler;

  virtual ~ProtoRpcServiceIfFactory() {}

  virtual ProtoRpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProtoRpcServiceIf* /* handler */) = 0;
};

class ProtoRpcServiceIfSingletonFactory : virtual public ProtoRpcServiceIfFactory {
 public:
  ProtoRpcServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf>& iface) : iface_(iface) {}
  virtual ~ProtoRpcServiceIfSingletonFactory() {}

  virtual ProtoRpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProtoRpcServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> iface_;
};

class ProtoRpcServiceNull : virtual public ProtoRpcServiceIf {
 public:
  virtual ~ProtoRpcServiceNull() {}
  void dealTwowayMessage(ProtoReply& /* _return */, const ProtoRequest& /* rq */) {
    return;
  }
  void dealOnewayMessage(const ProtoRequest& /* rq */) {
    return;
  }
};

typedef struct _ProtoRpcService_dealTwowayMessage_args__isset {
  _ProtoRpcService_dealTwowayMessage_args__isset() : rq(false) {}
  bool rq :1;
} _ProtoRpcService_dealTwowayMessage_args__isset;

class ProtoRpcService_dealTwowayMessage_args {
 public:

  ProtoRpcService_dealTwowayMessage_args(const ProtoRpcService_dealTwowayMessage_args&);
  ProtoRpcService_dealTwowayMessage_args& operator=(const ProtoRpcService_dealTwowayMessage_args&);
  ProtoRpcService_dealTwowayMessage_args() {
  }

  virtual ~ProtoRpcService_dealTwowayMessage_args() throw();
  ProtoRequest rq;

  _ProtoRpcService_dealTwowayMessage_args__isset __isset;

  void __set_rq(const ProtoRequest& val);

  bool operator == (const ProtoRpcService_dealTwowayMessage_args & rhs) const
  {
    if (!(rq == rhs.rq))
      return false;
    return true;
  }
  bool operator != (const ProtoRpcService_dealTwowayMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtoRpcService_dealTwowayMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProtoRpcService_dealTwowayMessage_pargs {
 public:


  virtual ~ProtoRpcService_dealTwowayMessage_pargs() throw();
  const ProtoRequest* rq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProtoRpcService_dealTwowayMessage_result__isset {
  _ProtoRpcService_dealTwowayMessage_result__isset() : success(false) {}
  bool success :1;
} _ProtoRpcService_dealTwowayMessage_result__isset;

class ProtoRpcService_dealTwowayMessage_result {
 public:

  ProtoRpcService_dealTwowayMessage_result(const ProtoRpcService_dealTwowayMessage_result&);
  ProtoRpcService_dealTwowayMessage_result& operator=(const ProtoRpcService_dealTwowayMessage_result&);
  ProtoRpcService_dealTwowayMessage_result() {
  }

  virtual ~ProtoRpcService_dealTwowayMessage_result() throw();
  ProtoReply success;

  _ProtoRpcService_dealTwowayMessage_result__isset __isset;

  void __set_success(const ProtoReply& val);

  bool operator == (const ProtoRpcService_dealTwowayMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProtoRpcService_dealTwowayMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtoRpcService_dealTwowayMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProtoRpcService_dealTwowayMessage_presult__isset {
  _ProtoRpcService_dealTwowayMessage_presult__isset() : success(false) {}
  bool success :1;
} _ProtoRpcService_dealTwowayMessage_presult__isset;

class ProtoRpcService_dealTwowayMessage_presult {
 public:


  virtual ~ProtoRpcService_dealTwowayMessage_presult() throw();
  ProtoReply* success;

  _ProtoRpcService_dealTwowayMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProtoRpcService_dealOnewayMessage_args__isset {
  _ProtoRpcService_dealOnewayMessage_args__isset() : rq(false) {}
  bool rq :1;
} _ProtoRpcService_dealOnewayMessage_args__isset;

class ProtoRpcService_dealOnewayMessage_args {
 public:

  ProtoRpcService_dealOnewayMessage_args(const ProtoRpcService_dealOnewayMessage_args&);
  ProtoRpcService_dealOnewayMessage_args& operator=(const ProtoRpcService_dealOnewayMessage_args&);
  ProtoRpcService_dealOnewayMessage_args() {
  }

  virtual ~ProtoRpcService_dealOnewayMessage_args() throw();
  ProtoRequest rq;

  _ProtoRpcService_dealOnewayMessage_args__isset __isset;

  void __set_rq(const ProtoRequest& val);

  bool operator == (const ProtoRpcService_dealOnewayMessage_args & rhs) const
  {
    if (!(rq == rhs.rq))
      return false;
    return true;
  }
  bool operator != (const ProtoRpcService_dealOnewayMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtoRpcService_dealOnewayMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProtoRpcService_dealOnewayMessage_pargs {
 public:


  virtual ~ProtoRpcService_dealOnewayMessage_pargs() throw();
  const ProtoRequest* rq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProtoRpcService_dealOnewayMessage_result {
 public:

  ProtoRpcService_dealOnewayMessage_result(const ProtoRpcService_dealOnewayMessage_result&);
  ProtoRpcService_dealOnewayMessage_result& operator=(const ProtoRpcService_dealOnewayMessage_result&);
  ProtoRpcService_dealOnewayMessage_result() {
  }

  virtual ~ProtoRpcService_dealOnewayMessage_result() throw();

  bool operator == (const ProtoRpcService_dealOnewayMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProtoRpcService_dealOnewayMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtoRpcService_dealOnewayMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProtoRpcService_dealOnewayMessage_presult {
 public:


  virtual ~ProtoRpcService_dealOnewayMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProtoRpcServiceClient : virtual public ProtoRpcServiceIf {
 public:
  ProtoRpcServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProtoRpcServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void dealTwowayMessage(ProtoReply& _return, const ProtoRequest& rq);
  void send_dealTwowayMessage(const ProtoRequest& rq);
  void recv_dealTwowayMessage(ProtoReply& _return);
  void dealOnewayMessage(const ProtoRequest& rq);
  void send_dealOnewayMessage(const ProtoRequest& rq);
  void recv_dealOnewayMessage();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProtoRpcServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProtoRpcServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_dealTwowayMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dealOnewayMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProtoRpcServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> iface) :
    iface_(iface) {
    processMap_["dealTwowayMessage"] = &ProtoRpcServiceProcessor::process_dealTwowayMessage;
    processMap_["dealOnewayMessage"] = &ProtoRpcServiceProcessor::process_dealOnewayMessage;
  }

  virtual ~ProtoRpcServiceProcessor() {}
};

class ProtoRpcServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProtoRpcServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ProtoRpcServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ProtoRpcServiceIfFactory > handlerFactory_;
};

class ProtoRpcServiceMultiface : virtual public ProtoRpcServiceIf {
 public:
  ProtoRpcServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProtoRpcServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> > ifaces_;
  ProtoRpcServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ProtoRpcServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void dealTwowayMessage(ProtoReply& _return, const ProtoRequest& rq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dealTwowayMessage(_return, rq);
    }
    ifaces_[i]->dealTwowayMessage(_return, rq);
    return;
  }

  void dealOnewayMessage(const ProtoRequest& rq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dealOnewayMessage(rq);
    }
    ifaces_[i]->dealOnewayMessage(rq);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ProtoRpcServiceConcurrentClient : virtual public ProtoRpcServiceIf {
 public:
  ProtoRpcServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProtoRpcServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void dealTwowayMessage(ProtoReply& _return, const ProtoRequest& rq);
  int32_t send_dealTwowayMessage(const ProtoRequest& rq);
  void recv_dealTwowayMessage(ProtoReply& _return, const int32_t seqid);
  void dealOnewayMessage(const ProtoRequest& rq);
  int32_t send_dealOnewayMessage(const ProtoRequest& rq);
  void recv_dealOnewayMessage(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
