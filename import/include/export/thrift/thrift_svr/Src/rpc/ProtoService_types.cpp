/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ProtoService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace proto_rpc {


ProtoRequest::~ProtoRequest() throw() {
}


void ProtoRequest::__set_type(const int32_t val) {
  this->type = val;
}

void ProtoRequest::__set_sharding_id(const int64_t val) {
  this->sharding_id = val;
}

void ProtoRequest::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const ProtoRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProtoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_sharding_id = false;
  bool isset_content = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sharding_id);
          isset_sharding_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sharding_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProtoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProtoRequest");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sharding_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sharding_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProtoRequest &a, ProtoRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sharding_id, b.sharding_id);
  swap(a.content, b.content);
}

ProtoRequest::ProtoRequest(const ProtoRequest& other0) {
  type = other0.type;
  sharding_id = other0.sharding_id;
  content = other0.content;
}
ProtoRequest& ProtoRequest::operator=(const ProtoRequest& other1) {
  type = other1.type;
  sharding_id = other1.sharding_id;
  content = other1.content;
  return *this;
}
void ProtoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProtoRequest(";
  out << "type=" << to_string(type);
  out << ", " << "sharding_id=" << to_string(sharding_id);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


ProtoReply::~ProtoReply() throw() {
}


void ProtoReply::__set_type(const int32_t val) {
  this->type = val;
}

void ProtoReply::__set_result(const int64_t val) {
  this->result = val;
}

void ProtoReply::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const ProtoReply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProtoReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_result = false;
  bool isset_content = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->result);
          isset_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProtoReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProtoReply");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProtoReply &a, ProtoReply &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.result, b.result);
  swap(a.content, b.content);
}

ProtoReply::ProtoReply(const ProtoReply& other2) {
  type = other2.type;
  result = other2.result;
  content = other2.content;
}
ProtoReply& ProtoReply::operator=(const ProtoReply& other3) {
  type = other3.type;
  result = other3.result;
  content = other3.content;
  return *this;
}
void ProtoReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProtoReply(";
  out << "type=" << to_string(type);
  out << ", " << "result=" << to_string(result);
  out << ", " << "content=" << to_string(content);
  out << ")";
}

} // namespace
